# I2P router configuration
# Created on ##NOW##

# TCP configuration, for inbound TCP/IP connections
##_router_hn##
##_router_port##
##_router_lavalid##

# maximum number of TCP connections we will want to
# attempt to establish at once (each of which
# requires a 2048bit DH exchange)
i2np.tcp.concurrentEstablishers=5

# I2CP client port, for client connections
i2cp.port=##_router_i2cp_port##

# I2P router administrative web port (currently only responds to /routerConsole.html)
router.adminPort=7655

# Bandwidth limits
# These limits are for all i2np connections - tcp or whatever to all peers.
# They are hard enforced with no smoothing.  If they are <= 0, no limits are enforced.
# Do not set this lower than 6KBps
i2np.bandwidth.inboundKBytesPerSecond=-1
i2np.bandwidth.outboundKBytesPerSecond=-1
# How many bytes will we let accumulate due to inactivity (allowing bursts)?
# Do not set this lower than the rate above - doing so will not achieve what you want, really.
# (the bandwidth limiter uses a token bucket algorithm and this burst defines the size of the
# bucket)
i2np.bandwidth.inboundBurstKBytes=-1
i2np.bandwidth.outboundBurstKBytes=-1

# Publish peer rankings
# If true, include the current liveliness and reliability rankings in one's published RouterInfo data
# Setting this to true will help debug the network and is especially useful while we'return still testing
# However, traffic analysis may be easier with this data published (though there's no reason to think people
# can't just fake the info in this).
# Since we're still very much < 1.0, this will be true for the current release by default.  As we get some 
# network helth information and tune the ranking algorithms, this will become false by default.  
# You, of course, can change this to either true or false whenever you'd like.  This is only read 
# on router startup though, so you need to restart the router if you change it.
router.publishPeerRankings=true

# Keep message history
# This series of options can help out in debugging the network by keeping a 
# seperate log of all messages sent over the network (but without any personally identifiable information)
# This is entirely optional, but would be greatly appreciated during the 
# development phase of the network since it would allow the developers to detect 
# errors much more easily
router.keepHistory=false

# Submit message history
# This option works only if router.keepHistory is true and periodically sends 
# in the router history logs to the developers (specifically, it submits the file 
# via HTTP POST to http://i2p.net/cgi-bin/submitMessageHistory - you can see a sample of what
# one of those files looks like at http://i2p.net/~jrandom/sampleHist.txt)
# After submitting this file, it deletes the local copy (otherwise the file will grow 
# without bound - tens of MB per day)
# Again, this is entirely optional, but would be greatly appreciated as it should help 
# out the development process
router.submitHistory=false

# Target clients
# How many concurrent clients the router should prepare for
# This, factored in with the tunnel settings, determines the size of the pools -
# too many, and your machine consumes excessive CPU and bandwidth, too few and your 
# clients take too long to startup.  
# e.g. If you are running an eepsite, an eepProxy, an irc proxy, and a squid proxy, set this to 4
router.targetClients=2

# Number of inbound tunnels per client
# This determines how many inbound tunnels will be allocated per client at a time. 
# This is a key factor in the reliability of a client receiving messages
# As above, too many and your machine gets hosed, too few and the pool is slow.  
# 2 should be sufficient - prior to 0.2.5, we have all had only 1
tunnels.numInbound=2

# Number of outbound tunnels per client
# This determines how many outbound tunnels must exist when a client is in operation.
# XXX Not currently enforced - ignore this setting
tunnels.numOutbound=2

# Depth of inbound tunnels
# This determines the length of inbound tunnels created - how many remote routers to
# include (0 means no remote routers, 3 means a total of four routers, including
# the local one, etc).  This is a key factor in the reliability and anonymity 
# provided by I2P
# Users should simply leave this as 2 for now
tunnels.depthInbound=2

# Depth of outbound tunnels
# This determines the length of outbound tunnels created - how many remote routers to
# include (0 means no remote routers, 3 means a total of four routers, including
# the local one, etc).  This is a key factor in the reliability and anonymity 
# provided by I2P
# Users should simply leave this as 2 for now, at least until the tunnels are more reliable (post 0.3)
tunnels.depthOutbound=2

# Tunnel duration
# This determines how long tunnels we create should last for (in milliseconds).  Too
# long and they are more prone to failure, too short and people need to do more network
# database lookups.  The default of 10 minutes (600000 ms) should be used
# You should not change this setting unless you really know what you're doing
tunnels.tunnelDuration=600000

# shutdown password
# uncomment the following (after changing the value) to allow shutting down the 
# router through the web interface (using the form provided, or directly via
# http://localhost:7655/shutdown?password=thisIsASecret)
#router.shutdownPassword=thisIsASecret

#
# the remaining lines describe how you can get your router to fire up client 
# applications it is up and running, all within the router's JVM.  Uncomment the
# ones you want (revising the numbers and ports accordingly)

# Keep the router's clock in sync by querying one of the specified NTP servers once
# a minute (uses UDP port 123)
# This defaults to the DNS round-robin ntp pool - see http://www.pool.ntp.org/
# Please change the NTP server specified to include ones closer to you - see 
# http://www.eecis.udel.edu/~mills/ntp/clock2a.html for a list (you can specify as
# many as you want on the args= line - they'll be tried in order until one answers).
# Some example servers you may want to try: 
#  US: dewey.lib.ci.phoenix.az.us
#  US: clock.fmt.he.net
#  BR: ntp1.pucpr.br
#  BE: ntp2.belbone.be
#  AU: ntp.saard.net
clientApp.0.main=net.i2p.time.Timestamper
clientApp.0.name=Timestamper
clientApp.0.onBoot=true
clientApp.0.args=http://localhost:7655/setTime?##timestamperPassword## pool.ntp.org pool.ntp.org pool.ntp.org

# The admin time passphrase, used to prevent unauthorized people from updating your
# routers time.  The value should be included in the timestamper's args above, 
# otherwise it wont honor timestamp updates.  You shouldnt include any spaces or funky 
# characters - just pick some random numbers.
adminTimePassphrase=##timestamperPassword##

# SAM bridge (a simplified socket based protocol for using I2P - listens on port 7656.  see
# the specs at http://www.i2p.net/node/view/144 for more info)
clientApp.1.main=net.i2p.sam.SAMBridge
clientApp.1.name=SAMBridge
clientApp.1.args=sam.keys 0.0.0.0 7656 i2cp.tcp.host=localhost i2cp.tcp.port=##_router_i2cp_port##

# The eepProxy (HTTP proxy that lets you browse both eepsites and the normal web via squid.i2p) and
# the ircProxy (which connects to the anonymously hosted ircd at irc.duck.i2p)
clientApp.2.main=net.i2p.i2ptunnel.I2PTunnel
clientApp.2.name=Tunnels
clientApp.2.args=-nocli -e "config localhost ##_router_i2cp_port##" -e "httpclient 4444" -e "client 6668 irc.duck.i2p"
# note: if you want the proxies to be reachable from other machines, add:
#       -e "listen_on 0.0.0.0"   
# before the -e "httpclient 4444".  otherwise, both of these proxies will only listen for connections on 127.0.0.1

# New router console webapp, driven by Jetty
# to use, you must mkdir ./webapps/ and place the routerconsole.war file in there,
# and add jetty-all.jar and routerconsole.jar in the router's classpath in the startRouter 
# script
# (don't bother trying to figure this out prior to the 0.4 release)
#clientApp.3.main=net.i2p.router.web.RouterConsoleRunner
#clientApp.3.name=webConsole
#clientApp.3.args=7657 127.0.0.1 ./webapps/
#clientApp.3.onBoot=true

# To require simple HTTP authentication for accessing any of the pages underneath the web console
# (including any other webapps deployed), uncomment the following line and set the password
# accordingly (the username is 'admin').  If the following is commented out, or is blank, then
# no password will be required, and anyone will be able to access your router console (and change 
# settings, etc).  This is only used for the new jetty console (started in clientApp.3.* above)
#
#consolePassword=fooBarBaz

# Network monitor (harvests data from the network database and stores it under 
# monitorData/, and with the netviewer GUI you can browse through its results)
#clientApp.4.main=net.i2p.netmonitor.NetMonitor
#clientApp.4.name=NetMonitor
#clientApp.4.args=

# Heartbeat engine (ueber-simple ping/pong system, configured in heartbeat.config.  By itself
# it just writes out stat data where its told to, but there's a seperate HeartbeatMonitor 
# GUI to let you visualize things)
#clientApp.5.main=net.i2p.heartbeat.Heartbeat
#clientApp.5.name=Heartbeat
#clientApp.5.args=heartbeat.config
