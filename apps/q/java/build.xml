<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="aum">
  <!-- Written to assume that classpath is rooted in the current directory. -->
  <!-- So this should be OK if you make this script in the root of a filesystem. -->
  <!-- If not, just change src.dir to be the root of your sources' package tree -->
  <!-- and use e.g. View over a Filesystem to mount that subdirectory with all capabilities. -->
  <!-- The idea is that both Ant and NetBeans have to know what the package root is -->
  <!-- for the classes in your application. -->

  <!-- Don't worry if you don't know the Ant syntax completely or need help on some tasks! -->
  <!-- The standard Ant documentation can be downloaded from AutoUpdate and -->
  <!-- and then you can access the Ant manual in the online help. -->

  <target name="init">
    <property location="build" name="classes.dir"/>
    <property location="src" name="src.dir"/>
    <property location="doc/q/api" name="javadoc.dir"/>
    <property name="project.name" value="${ant.project.name}"/>
    <property location="${project.name}.jar" name="jar"/>
  </target>

  <target name="builddep">
    <ant dir="../../i2ptunnel/java/" target="build" />
    <!-- i2ptunnel builds ministreaming and core -->
  </target>
  
  <target depends="init,builddep" name="compile">
    <!-- Both srcdir and destdir should be package roots. -->
    <mkdir dir="${classes.dir}"/>
    <javac debug="true" 
           deprecation="true" 
           destdir="${classes.dir}" 
           srcdir="${src.dir}"
           classpath="xmlrpc.jar:../../../core/java/build/i2p.jar:../../ministreaming/java/build/mstreaming.jar:../../i2ptunnel/java/build/i2ptunnel.jar" >
      <!-- To add something to the classpath: -->
      <!-- <classpath><pathelement location="${mylib}"/></classpath> -->
      <!-- To exclude some files: -->
      <!-- <exclude name="com/foo/SomeFile.java"/><exclude name="com/foo/somepackage/"/> -->
    </javac>
  </target>

  <target depends="init,compile" name="jar">
    <!-- To make a standalone app, insert into <jar>: -->
    <!-- <manifest><attribute name="Main-Class" value="com.foo.Main"/></manifest> -->
    <!-- <jar basedir="${classes.dir}" compress="true" jarfile="${jar}"> -->
    <jar compress="true" jarfile="${jar}">
      <!-- <jar basedir="." compress="true" jarfile="${jar}" includes="**/*.class,doc/**/*.html"> -->
      <fileset dir="${classes.dir}"/>
      <fileset dir="." includes="qresources/**"/>
      <manifest>
        <attribute name="Main-Class" value="net.i2p.aum.q.QMgr"/>
        <attribute name="Class-Path" value="i2p.jar xmlrpc.jar mstreaming.jar streaming.jar jbigi.jar"/>
      </manifest>
    </jar>
  </target>

  <target depends="init,jar" description="Build everything." name="all"/>

  <target depends="init" description="Javadoc for my API." name="javadoc">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc destdir="${javadoc.dir}" packagenames="*">
      <sourcepath>
        <pathelement location="${src.dir}"/>
      </sourcepath>
      <sourcepath>
        <pathelement location="/java/xmlrpc-1.2-b1/src/java"/>
      </sourcepath>
    </javadoc>
  </target>

  <target depends="init" description="Clean all build products." name="clean">
    <delete dir="${classes.dir}"/>
    <delete dir="${javadoc.dir}"/>
    <delete file="${jar}"/>
  </target>

</project>
